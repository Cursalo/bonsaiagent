name: Security Vulnerability Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8.15.0'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: NPM Audit
        run: |
          pnpm audit --audit-level moderate --json > npm-audit-results.json
          pnpm audit --audit-level moderate
        continue-on-error: true

      - name: Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json > snyk-results.json
        continue-on-error: true

      - name: Upload scan results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-scan-results
          path: |
            npm-audit-results.json
            snyk-results.json

  # SAST (Static Application Security Testing)
  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript"

      - name: Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/react
            p/typescript
            p/nodejs
          generateSarif: "1"
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Upload Semgrep results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: semgrep.sarif

  # Container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker images
        run: |
          docker build -f infrastructure/docker/Dockerfile.web -t bonsai-web:latest .
          docker build -f infrastructure/docker/Dockerfile.websocket -t bonsai-websocket:latest .

      - name: Trivy container scan - Web
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'bonsai-web:latest'
          format: 'sarif'
          output: 'trivy-web-results.sarif'

      - name: Trivy container scan - WebSocket
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'bonsai-websocket:latest'
          format: 'sarif'
          output: 'trivy-websocket-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-web-results.sarif'

      - name: Upload Trivy WebSocket results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-websocket-results.sarif'

  # Secrets scanning
  secret-scan:
    name: Secret Detection Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: GitLeaks Secret Detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Infrastructure security scanning
  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkov Infrastructure Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,kubernetes,terraform
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Kube-score security analysis
        run: |
          wget https://github.com/zegl/kube-score/releases/latest/download/kube-score_linux_amd64
          chmod +x kube-score_linux_amd64
          find . -name "*.yaml" -o -name "*.yml" | grep -E "(k8s|kubernetes)" | xargs ./kube-score_linux_amd64 score || true

  # License compliance scanning
  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: License Checker
        run: |
          npx license-checker --production --json > license-report.json
          npx license-checker --production --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;CC0-1.0;Unlicense"

      - name: FOSSA License Scan
        uses: fossas/fossa-action@main
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
          run-tests: true

      - name: Upload license results
        uses: actions/upload-artifact@v3
        with:
          name: license-scan-results
          path: license-report.json

  # Web application security testing
  web-security-scan:
    name: Web Application Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm web:build

      - name: Start application
        run: |
          pnpm web:start &
          sleep 30
        env:
          NODE_ENV: production

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Nuclei Security Scan
        uses: projectdiscovery/nuclei-action@main
        with:
          target: 'http://localhost:3000'
          templates: 'cves,vulnerabilities,security-misconfiguration'

  # Browser extension security scan
  extension-security-scan:
    name: Browser Extension Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build browser extension
        run: |
          cd apps/browser-extension
          npm install
          npm run build:all

      - name: Extension Security Scan
        run: |
          # Custom extension security checks
          cd apps/browser-extension
          
          # Check for dangerous permissions
          cat manifest.json | jq '.permissions[]' | grep -E "(tabs|webNavigation|webRequest|storage|cookies)" || true
          
          # Check for content security policy
          cat manifest.json | jq '.content_security_policy' || echo "No CSP found"
          
          # Check for external connections
          cat manifest.json | jq '.externally_connectable' || echo "No external connections"
          
          # Scan for potential XSS vulnerabilities
          grep -r "innerHTML\|outerHTML\|insertAdjacentHTML" . || true
          
          # Check for eval usage
          grep -r "eval\|Function\|setTimeout.*string\|setInterval.*string" . || true

  # API security testing
  api-security-scan:
    name: API Security Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Start application for API testing
        run: |
          pnpm web:start &
          sleep 30
        env:
          NODE_ENV: test

      - name: API Security Testing with OWASP ZAP
        run: |
          # Install ZAP
          docker pull owasp/zap2docker-stable
          
          # Run API scan
          docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable \
            zap-api-scan.py -t http://host.docker.internal:3000/api \
            -f openapi -J api-security-report.json

      - name: Upload API security results
        uses: actions/upload-artifact@v3
        with:
          name: api-security-results
          path: api-security-report.json

  # Compliance checking
  compliance-check:
    name: Security Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: GDPR Compliance Check
        run: |
          # Check for GDPR-related files and implementations
          echo "Checking GDPR compliance..."
          
          # Check for privacy policy
          find . -name "*privacy*" -o -name "*gdpr*" | head -10
          
          # Check for cookie consent
          grep -r "cookie.*consent\|gdpr\|privacy.*policy" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" . | head -10
          
          # Check for data retention policies
          grep -r "data.*retention\|delete.*user\|anonymize" --include="*.ts" --include="*.tsx" . | head -10

      - name: FERPA Compliance Check
        run: |
          # Check for FERPA compliance (educational records protection)
          echo "Checking FERPA compliance..."
          
          # Check for educational data protection
          grep -r "ferpa\|educational.*record\|student.*data" --include="*.ts" --include="*.tsx" . | head -10
          
          # Check for data encryption
          grep -r "encrypt\|cipher\|crypto" --include="*.ts" --include="*.tsx" . | head -10

      - name: SOC 2 Compliance Check
        run: |
          # Check for SOC 2 compliance elements
          echo "Checking SOC 2 compliance..."
          
          # Check for audit logging
          grep -r "audit.*log\|security.*log" --include="*.ts" --include="*.tsx" . | head -10
          
          # Check for access controls
          grep -r "rbac\|role.*based\|permission\|authorize" --include="*.ts" --include="*.tsx" . | head -10

  # Security reporting
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [
      dependency-scan,
      sast-scan,
      container-scan,
      secret-scan,
      infrastructure-scan,
      license-scan,
      extension-security-scan,
      compliance-check
    ]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate security summary
        run: |
          cat > security-summary.md << 'EOF'
          # Security Scan Summary
          
          ## Scan Results
          
          | Scan Type | Status | Issues Found |
          |-----------|--------|--------------|
          | Dependency Scan | ${{ needs.dependency-scan.result }} | Check artifacts |
          | SAST Scan | ${{ needs.sast-scan.result }} | Check Security tab |
          | Container Scan | ${{ needs.container-scan.result }} | Check Security tab |
          | Secret Scan | ${{ needs.secret-scan.result }} | Check artifacts |
          | Infrastructure Scan | ${{ needs.infrastructure-scan.result }} | Check Security tab |
          | License Scan | ${{ needs.license-scan.result }} | Check artifacts |
          | Extension Security | ${{ needs.extension-security-scan.result }} | Check artifacts |
          | Compliance Check | ${{ needs.compliance-check.result }} | Check logs |
          
          ## Recommendations
          
          1. Review all high and critical severity issues
          2. Update dependencies with known vulnerabilities
          3. Fix any secrets detected in the codebase
          4. Address container security findings
          5. Ensure compliance requirements are met
          
          ## Next Steps
          
          - [ ] Review Security tab for detailed findings
          - [ ] Download and analyze artifact reports
          - [ ] Create tickets for remediation
          - [ ] Schedule follow-up security review
          
          Generated at: $(date)
          EOF

      - name: Upload security summary
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: security-summary.md

      - name: Comment on PR with security results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Notify security team
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            🚨 Security scan failures detected!
            
            Please review the Security tab and artifacts for detailed findings.
            Immediate attention may be required for critical vulnerabilities.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_SECURITY }}