name: Staging Deployment

on:
  push:
    branches: [develop]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8.15.0'

jobs:
  # Build staging deployment
  build-staging:
    name: Build Staging Environment
    runs-on: ubuntu-latest
    outputs:
      preview-url: ${{ steps.vercel.outputs.preview-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for staging
        run: pnpm web:build
        env:
          NODE_ENV: staging
          NEXT_TELEMETRY_DISABLED: 1
          SUPABASE_URL: ${{ secrets.SUPABASE_URL_STAGING }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY_STAGING }}

      - name: Deploy to Vercel (Preview)
        id: vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: apps/web
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # Deploy staging WebSocket server
  deploy-staging-websocket:
    name: Deploy Staging WebSocket
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Deploy WebSocket to Railway (Staging)
        run: |
          npm install -g @railway/cli
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          railway up --service websocket-staging
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  # Staging database setup
  setup-staging-database:
    name: Setup Staging Database
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Supabase CLI
        run: npm install -g supabase

      - name: Reset staging database
        run: |
          supabase db reset --linked
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_REF: ${{ secrets.SUPABASE_PROJECT_REF_STAGING }}

      - name: Seed staging data
        run: |
          cd apps/web
          npm run db:seed:staging
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL_STAGING }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY_STAGING }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_STAGING }}

  # Staging tests
  staging-tests:
    name: Staging Environment Tests
    runs-on: ubuntu-latest
    needs: [build-staging, deploy-staging-websocket, setup-staging-database]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Run end-to-end tests
        run: pnpm test:e2e
        env:
          BASE_URL: ${{ needs.build-staging.outputs.preview-url }}
          WEBSOCKET_URL: ${{ secrets.WEBSOCKET_URL_STAGING }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL_STAGING }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD_STAGING }}

      - name: Run integration tests
        run: pnpm test:integration
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL_STAGING }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY_STAGING }}
          WEBSOCKET_URL: ${{ secrets.WEBSOCKET_URL_STAGING }}

      - name: Run accessibility tests
        run: pnpm test:a11y
        env:
          BASE_URL: ${{ needs.build-staging.outputs.preview-url }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            test-results/
            playwright-report/

  # Performance benchmarking
  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: [build-staging]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ needs.build-staging.outputs.preview-url }}
            ${{ needs.build-staging.outputs.preview-url }}/dashboard
            ${{ needs.build-staging.outputs.preview-url }}/practice
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: WebSocket load test
        run: |
          npm run test:websocket-load
        env:
          WEBSOCKET_URL: ${{ secrets.WEBSOCKET_URL_STAGING }}
          CONCURRENT_CONNECTIONS: 100
          TEST_DURATION: 60

      - name: API performance test
        run: |
          npm run test:api-performance
        env:
          BASE_URL: ${{ needs.build-staging.outputs.preview-url }}

  # Browser extension staging tests
  extension-staging-tests:
    name: Browser Extension Staging Tests
    runs-on: ubuntu-latest
    needs: [build-staging]
    strategy:
      matrix:
        browser: [chrome, firefox]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build extension for staging
        run: |
          cd apps/browser-extension
          npm install
          npm run build:staging:${{ matrix.browser }}
        env:
          STAGING_API_URL: ${{ needs.build-staging.outputs.preview-url }}

      - name: Test extension
        run: |
          cd apps/browser-extension
          npm run test:${{ matrix.browser }}:staging
        env:
          STAGING_URL: ${{ needs.build-staging.outputs.preview-url }}

      - name: Upload extension artifacts
        uses: actions/upload-artifact@v3
        with:
          name: extension-staging-${{ matrix.browser }}
          path: apps/browser-extension/dist/

  # Security scanning for staging
  staging-security-scan:
    name: Staging Security Scan
    runs-on: ubuntu-latest
    needs: [build-staging]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: ${{ needs.build-staging.outputs.preview-url }}
          rules_file_name: '.zap/rules.tsv'

      - name: Security headers check
        run: |
          npm install -g @httptoolkit/security-headers-checker
          security-headers-checker ${{ needs.build-staging.outputs.preview-url }}

      - name: SSL/TLS configuration test
        run: |
          # Test SSL configuration
          curl -I ${{ needs.build-staging.outputs.preview-url }} | grep -i "strict-transport-security"

  # Visual regression testing
  visual-regression:
    name: Visual Regression Testing
    runs-on: ubuntu-latest
    needs: [build-staging]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          npm install -g @percy/cli
          npx playwright install

      - name: Run visual regression tests
        run: |
          npm run test:visual-regression
        env:
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
          BASE_URL: ${{ needs.build-staging.outputs.preview-url }}

  # API documentation update
  update-api-docs:
    name: Update API Documentation
    runs-on: ubuntu-latest
    needs: [staging-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate API documentation
        run: |
          npm install -g @apidevtools/swagger-parser
          npm run docs:generate-api

      - name: Deploy documentation to staging
        run: |
          # Deploy to documentation hosting service
          npm run docs:deploy:staging
        env:
          DOCS_DEPLOY_TOKEN: ${{ secrets.DOCS_DEPLOY_TOKEN }}

  # Notify QA team
  notify-qa:
    name: Notify QA Team
    runs-on: ubuntu-latest
    needs: [
      build-staging,
      staging-tests,
      performance-benchmark,
      extension-staging-tests
    ]
    if: always() && github.event_name == 'pull_request'
    steps:
      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo, number } = context.issue;
            const success = '${{ needs.staging-tests.result }}' === 'success';
            const previewUrl = '${{ needs.build-staging.outputs.preview-url }}';
            
            const body = success 
              ? `## ✅ Staging Environment Ready for QA
              
              **Preview URL:** ${previewUrl}
              **WebSocket URL:** ${{ secrets.WEBSOCKET_URL_STAGING }}
              
              ### Test Results:
              - ✅ End-to-end tests passed
              - ✅ Integration tests passed
              - ✅ Performance benchmarks completed
              - ✅ Browser extension tests passed
              
              ### QA Checklist:
              - [ ] User authentication flow
              - [ ] SAT practice tests functionality
              - [ ] Voice assistant features
              - [ ] Real-time analytics
              - [ ] Browser extension integration
              - [ ] Mobile responsiveness
              - [ ] Accessibility compliance
              
              **Test Accounts:**
              - Email: qa-test@bonsaisat.com
              - Password: Available in team password manager
              `
              : `## ❌ Staging Deployment Failed
              
              Some tests failed. Please check the GitHub Actions logs and fix the issues before QA testing.
              `;
            
            github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body
            });

      - name: Notify Slack
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            🚀 Staging environment ready for QA!
            
            **Preview URL:** ${{ needs.build-staging.outputs.preview-url }}
            **PR:** ${{ github.event.pull_request.html_url }}
            
            All automated tests passed. Ready for manual QA testing.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_QA }}

  # Cleanup old preview deployments
  cleanup-previews:
    name: Cleanup Old Previews
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    steps:
      - name: Delete preview deployment
        run: |
          # Clean up Vercel preview deployment
          npm install -g vercel
          vercel --token ${{ secrets.VERCEL_TOKEN }} rm --yes ${{ github.event.pull_request.head.ref }}

      - name: Cleanup staging WebSocket
        run: |
          # Cleanup staging WebSocket instance if needed
          npm install -g @railway/cli
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          railway service delete websocket-pr-${{ github.event.pull_request.number }} --yes || true
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}