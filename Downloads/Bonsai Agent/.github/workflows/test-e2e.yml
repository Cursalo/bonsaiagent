name: End-to-End Testing

on:
  schedule:
    # Run E2E tests every 4 hours
    - cron: '0 */4 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - smoke
          - critical
          - performance
  push:
    branches: [main, develop]
    paths:
      - 'apps/web/src/**'
      - 'apps/browser-extension/**'
      - 'tests/e2e/**'

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8.15.0'

jobs:
  # Determine test configuration
  setup:
    name: Setup Test Configuration
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.config.outputs.environment }}
      base-url: ${{ steps.config.outputs.base-url }}
      websocket-url: ${{ steps.config.outputs.websocket-url }}
      test-suite: ${{ steps.config.outputs.test-suite }}
      browsers: ${{ steps.config.outputs.browsers }}
    steps:
      - name: Determine configuration
        id: config
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "test-suite=${{ github.event.inputs.test_suite }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "test-suite=smoke" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "test-suite=full" >> $GITHUB_OUTPUT
          fi
          
          # Set URLs based on environment
          if [[ "${{ steps.config.outputs.environment }}" == "production" ]]; then
            echo "base-url=https://bonsaisat.com" >> $GITHUB_OUTPUT
            echo "websocket-url=wss://ws.bonsaisat.com" >> $GITHUB_OUTPUT
          else
            echo "base-url=https://staging.bonsaisat.com" >> $GITHUB_OUTPUT
            echo "websocket-url=wss://ws-staging.bonsaisat.com" >> $GITHUB_OUTPUT
          fi
          
          # Set browsers based on test suite
          case "${{ steps.config.outputs.test-suite }}" in
            "smoke")
              echo "browsers=[\"chromium\"]" >> $GITHUB_OUTPUT
              ;;
            "critical")
              echo "browsers=[\"chromium\", \"firefox\"]" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "browsers=[\"chromium\", \"firefox\", \"webkit\"]" >> $GITHUB_OUTPUT
              ;;
          esac

  # Main E2E test suite
  e2e-tests:
    name: E2E Tests (${{ matrix.browser }})
    runs-on: ubuntu-latest
    needs: [setup]
    strategy:
      fail-fast: false
      matrix:
        browser: ${{ fromJson(needs.setup.outputs.browsers) }}
        shard: [1, 2, 3, 4]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Run E2E tests
        run: |
          npx playwright test --project=${{ matrix.browser }} --shard=${{ matrix.shard }}/4
        env:
          BASE_URL: ${{ needs.setup.outputs.base-url }}
          WEBSOCKET_URL: ${{ needs.setup.outputs.websocket-url }}
          TEST_SUITE: ${{ needs.setup.outputs.test-suite }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
          TEST_ADMIN_EMAIL: ${{ secrets.TEST_ADMIN_EMAIL }}
          TEST_ADMIN_PASSWORD: ${{ secrets.TEST_ADMIN_PASSWORD }}
          CI: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-results-${{ matrix.browser }}-${{ matrix.shard }}
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # SAT-specific functionality tests
  sat-functionality-tests:
    name: SAT Practice Tests
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Test SAT question generation
        run: npx playwright test tests/e2e/sat/question-generation.spec.ts
        env:
          BASE_URL: ${{ needs.setup.outputs.base-url }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

      - name: Test adaptive learning
        run: npx playwright test tests/e2e/sat/adaptive-learning.spec.ts
        env:
          BASE_URL: ${{ needs.setup.outputs.base-url }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

      - name: Test scoring and analytics
        run: npx playwright test tests/e2e/sat/scoring-analytics.spec.ts
        env:
          BASE_URL: ${{ needs.setup.outputs.base-url }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

      - name: Test practice test flow
        run: npx playwright test tests/e2e/sat/practice-test-flow.spec.ts
        env:
          BASE_URL: ${{ needs.setup.outputs.base-url }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

  # Voice assistant tests
  voice-assistant-tests:
    name: Voice Assistant Tests
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Test voice activation
        run: npx playwright test tests/e2e/voice/voice-activation.spec.ts
        env:
          BASE_URL: ${{ needs.setup.outputs.base-url }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

      - name: Test voice commands
        run: npx playwright test tests/e2e/voice/voice-commands.spec.ts
        env:
          BASE_URL: ${{ needs.setup.outputs.base-url }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

      - name: Test text-to-speech
        run: npx playwright test tests/e2e/voice/text-to-speech.spec.ts
        env:
          BASE_URL: ${{ needs.setup.outputs.base-url }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

  # Real-time features tests
  realtime-tests:
    name: Real-time Features Tests
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Test WebSocket connections
        run: npx playwright test tests/e2e/realtime/websocket.spec.ts
        env:
          BASE_URL: ${{ needs.setup.outputs.base-url }}
          WEBSOCKET_URL: ${{ needs.setup.outputs.websocket-url }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

      - name: Test live coaching
        run: npx playwright test tests/e2e/realtime/live-coaching.spec.ts
        env:
          BASE_URL: ${{ needs.setup.outputs.base-url }}
          WEBSOCKET_URL: ${{ needs.setup.outputs.websocket-url }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

      - name: Test real-time analytics
        run: npx playwright test tests/e2e/realtime/analytics.spec.ts
        env:
          BASE_URL: ${{ needs.setup.outputs.base-url }}
          WEBSOCKET_URL: ${{ needs.setup.outputs.websocket-url }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

  # Browser extension tests
  browser-extension-tests:
    name: Browser Extension Tests
    runs-on: ubuntu-latest
    needs: [setup]
    strategy:
      matrix:
        browser: [chrome, firefox, edge]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install extension dependencies
        run: |
          cd apps/browser-extension
          npm install

      - name: Build extension
        run: |
          cd apps/browser-extension
          npm run build:${{ matrix.browser }}
        env:
          API_URL: ${{ needs.setup.outputs.base-url }}
          WEBSOCKET_URL: ${{ needs.setup.outputs.websocket-url }}

      - name: Test extension installation
        run: |
          cd apps/browser-extension
          npm run test:install:${{ matrix.browser }}

      - name: Test extension functionality
        run: |
          cd apps/browser-extension
          npm run test:functionality:${{ matrix.browser }}
        env:
          BASE_URL: ${{ needs.setup.outputs.base-url }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

      - name: Test extension permissions
        run: |
          cd apps/browser-extension
          npm run test:permissions:${{ matrix.browser }}

  # Mobile responsiveness tests
  mobile-tests:
    name: Mobile Responsiveness Tests
    runs-on: ubuntu-latest
    needs: [setup]
    strategy:
      matrix:
        device: [iPhone 13, iPad, Samsung Galaxy, Pixel 5]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Run mobile tests
        run: npx playwright test tests/e2e/mobile/ --project='${{ matrix.device }}'
        env:
          BASE_URL: ${{ needs.setup.outputs.base-url }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

  # Accessibility tests
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Run accessibility tests
        run: npx playwright test tests/e2e/accessibility/
        env:
          BASE_URL: ${{ needs.setup.outputs.base-url }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

      - name: WCAG compliance check
        run: |
          npm install -g @axe-core/cli
          axe ${{ needs.setup.outputs.base-url }} --save wcag-results.json

      - name: Upload accessibility results
        uses: actions/upload-artifact@v3
        with:
          name: accessibility-results
          path: wcag-results.json

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [setup]
    if: needs.setup.outputs.test-suite == 'full' || needs.setup.outputs.test-suite == 'performance'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run Lighthouse audits
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ needs.setup.outputs.base-url }}
            ${{ needs.setup.outputs.base-url }}/dashboard
            ${{ needs.setup.outputs.base-url }}/practice
            ${{ needs.setup.outputs.base-url }}/analytics
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: WebPageTest audit
        run: |
          npm install -g webpagetest
          webpagetest test ${{ needs.setup.outputs.base-url }} \
            --key ${{ secrets.WEBPAGETEST_API_KEY }} \
            --location Dulles:Chrome \
            --runs 3 \
            --first \
            --video \
            --breakdown
        env:
          WEBPAGETEST_API_KEY: ${{ secrets.WEBPAGETEST_API_KEY }}

      - name: Load testing
        run: |
          npm install -g artillery
          artillery run tests/performance/load-test.yml
        env:
          TARGET_URL: ${{ needs.setup.outputs.base-url }}

  # Security tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [setup]
    if: needs.setup.outputs.test-suite == 'full' || needs.setup.outputs.test-suite == 'critical'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: OWASP ZAP Security Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: ${{ needs.setup.outputs.base-url }}
          rules_file_name: '.zap/rules.tsv'

      - name: Nuclei security scan
        run: |
          docker run --rm -v $(pwd):/nuclei projectdiscovery/nuclei:latest \
            -u ${{ needs.setup.outputs.base-url }} \
            -t /nuclei/tests/security/nuclei-templates/

      - name: Test authentication security
        run: npx playwright test tests/e2e/security/
        env:
          BASE_URL: ${{ needs.setup.outputs.base-url }}
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

  # Test report generation
  generate-test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [
      e2e-tests,
      sat-functionality-tests,
      voice-assistant-tests,
      realtime-tests,
      browser-extension-tests,
      mobile-tests,
      accessibility-tests,
      performance-tests,
      security-tests
    ]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test artifacts
        uses: actions/download-artifact@v3

      - name: Generate unified test report
        run: |
          npm install -g playwright-html-reporter
          npx playwright-html-reporter --merge-reports \
            --output-folder merged-report \
            playwright-results-*/

      - name: Generate test summary
        run: |
          node scripts/generate-test-summary.js
        env:
          ENVIRONMENT: ${{ needs.setup.outputs.environment }}
          TEST_SUITE: ${{ needs.setup.outputs.test-suite }}

      - name: Upload test report
        uses: actions/upload-artifact@v3
        with:
          name: test-report-${{ needs.setup.outputs.environment }}
          path: |
            merged-report/
            test-summary.json
          retention-days: 30

      - name: Comment on PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = JSON.parse(fs.readFileSync('test-summary.json', 'utf8'));
            
            const body = `## 🧪 E2E Test Results
            
            **Environment:** ${{ needs.setup.outputs.environment }}
            **Test Suite:** ${{ needs.setup.outputs.test-suite }}
            
            ### Results Summary:
            - **Total Tests:** ${summary.total}
            - **Passed:** ${summary.passed} ✅
            - **Failed:** ${summary.failed} ❌
            - **Skipped:** ${summary.skipped} ⏭️
            
            ### Test Categories:
            - SAT Functionality: ${summary.categories.sat}
            - Voice Assistant: ${summary.categories.voice}
            - Real-time Features: ${summary.categories.realtime}
            - Browser Extension: ${summary.categories.extension}
            - Mobile: ${summary.categories.mobile}
            - Accessibility: ${summary.categories.accessibility}
            - Performance: ${summary.categories.performance}
            - Security: ${summary.categories.security}
            
            ${summary.failed > 0 ? '⚠️ Some tests failed. Please review the detailed report.' : '🎉 All tests passed!'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

  # Notification
  notify-results:
    name: Notify Test Results
    runs-on: ubuntu-latest
    needs: [
      setup,
      generate-test-report
    ]
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            🧪 E2E Test Results for ${{ needs.setup.outputs.environment }}
            
            **Test Suite:** ${{ needs.setup.outputs.test-suite }}
            **Status:** ${{ job.status }}
            
            Detailed results available in GitHub Actions artifacts.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_QA }}