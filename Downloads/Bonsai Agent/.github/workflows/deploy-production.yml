name: Production Deployment

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8.15.0'

jobs:
  # Pre-deployment checks
  pre-deployment:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(date '+%Y%m%d')-$(git rev-parse --short HEAD)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Verify CI passed
        run: |
          # Check if CI workflow passed for this commit
          gh run list --workflow=ci.yml --commit=${{ github.sha }} --json conclusion --jq '.[0].conclusion' | grep -q "success"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build and prepare deployment artifacts
  build-deployment:
    name: Build Deployment Artifacts
    runs-on: ubuntu-latest
    needs: [pre-deployment]
    strategy:
      matrix:
        target: [web, websocket, extension]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build web application
        if: matrix.target == 'web'
        run: |
          pnpm web:build
          # Create deployment package
          tar -czf web-deployment.tar.gz -C apps/web .next package.json next.config.js
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
          SUPABASE_URL: ${{ secrets.SUPABASE_URL_PROD }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY_PROD }}

      - name: Build WebSocket server
        if: matrix.target == 'websocket'
        run: |
          cd apps/web
          npx tsx scripts/build-websocket.ts
          tar -czf websocket-deployment.tar.gz -C apps/web dist scripts package.json

      - name: Build browser extensions
        if: matrix.target == 'extension'
        run: |
          cd apps/browser-extension
          npm install
          npm run build:all
          npm run package:all

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}-artifacts-${{ needs.pre-deployment.outputs.version }}
          path: |
            *-deployment.tar.gz
            apps/browser-extension/packages/

  # Database migrations
  database-migration:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [pre-deployment]
    environment: ${{ needs.pre-deployment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Supabase CLI
        run: |
          npm install -g supabase

      - name: Create database backup
        run: |
          supabase db dump --linked > backup-$(date +%Y%m%d-%H%M%S).sql
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

      - name: Run migrations
        run: |
          supabase migration up --linked
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

      - name: Verify migration
        run: |
          # Run health checks on database
          npm run db:health-check
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Upload backup
        uses: actions/upload-artifact@v3
        with:
          name: database-backup-${{ needs.pre-deployment.outputs.version }}
          path: backup-*.sql

  # Deploy web application
  deploy-web:
    name: Deploy Web Application
    runs-on: ubuntu-latest
    needs: [pre-deployment, build-deployment, database-migration]
    environment: ${{ needs.pre-deployment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download web artifacts
        uses: actions/download-artifact@v3
        with:
          name: web-artifacts-${{ needs.pre-deployment.outputs.version }}

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: apps/web
          alias-domains: |
            bonsaisat.com
            app.bonsaisat.com

      - name: Verify deployment
        run: |
          # Wait for deployment to be ready
          sleep 30
          # Run health checks
          curl -f https://bonsaisat.com/api/health
          curl -f https://bonsaisat.com/api/websocket/health

  # Deploy WebSocket server
  deploy-websocket:
    name: Deploy WebSocket Server
    runs-on: ubuntu-latest
    needs: [pre-deployment, build-deployment, database-migration]
    environment: ${{ needs.pre-deployment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download WebSocket artifacts
        uses: actions/download-artifact@v3
        with:
          name: websocket-artifacts-${{ needs.pre-deployment.outputs.version }}

      - name: Deploy to Railway
        run: |
          # Install Railway CLI
          npm install -g @railway/cli
          
          # Extract deployment package
          tar -xzf websocket-deployment.tar.gz
          
          # Deploy to Railway
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          railway up --service websocket-prod
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Verify WebSocket deployment
        run: |
          # Test WebSocket connection
          node scripts/test-websocket-connection.js
        env:
          WEBSOCKET_URL: ${{ secrets.WEBSOCKET_URL_PROD }}

  # Deploy browser extensions
  deploy-extensions:
    name: Deploy Browser Extensions
    runs-on: ubuntu-latest
    needs: [pre-deployment, build-deployment]
    environment: ${{ needs.pre-deployment.outputs.environment }}
    if: needs.pre-deployment.outputs.environment == 'production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download extension artifacts
        uses: actions/download-artifact@v3
        with:
          name: extension-artifacts-${{ needs.pre-deployment.outputs.version }}

      - name: Publish to Chrome Web Store
        uses: Klemensas/chrome-extension-upload-action@v1.3
        with:
          refresh-token: ${{ secrets.CHROME_REFRESH_TOKEN }}
          client-id: ${{ secrets.CHROME_CLIENT_ID }}
          client-secret: ${{ secrets.CHROME_CLIENT_SECRET }}
          file-path: apps/browser-extension/packages/chrome-extension.zip
          app-id: ${{ secrets.CHROME_APP_ID }}
          publish: true

      - name: Publish to Firefox Add-ons
        run: |
          # Install web-ext
          npm install -g web-ext
          
          # Submit to Firefox
          cd apps/browser-extension
          web-ext sign --api-key=${{ secrets.FIREFOX_API_KEY }} --api-secret=${{ secrets.FIREFOX_API_SECRET }}

      - name: Publish to Edge Add-ons
        run: |
          # Submit to Microsoft Edge Add-ons
          npm install -g edge-addon-upload
          edge-addon-upload --client-id ${{ secrets.EDGE_CLIENT_ID }} --client-secret ${{ secrets.EDGE_CLIENT_SECRET }} --product-id ${{ secrets.EDGE_PRODUCT_ID }} --package-path ./packages/edge-extension.zip

  # Update CDN and caches
  update-cdn:
    name: Update CDN and Caches
    runs-on: ubuntu-latest
    needs: [deploy-web, deploy-websocket]
    steps:
      - name: Purge Cloudflare cache
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'

      - name: Warm up cache
        run: |
          # Warm up critical pages
          curl -s https://bonsaisat.com/ > /dev/null
          curl -s https://bonsaisat.com/dashboard > /dev/null
          curl -s https://bonsaisat.com/practice > /dev/null

  # Post-deployment tests
  post-deployment-tests:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-web, deploy-websocket, update-cdn]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install test dependencies
        run: |
          npm install -g playwright
          playwright install

      - name: Run production smoke tests
        run: |
          npm run test:production-smoke
        env:
          BASE_URL: https://bonsaisat.com
          WEBSOCKET_URL: ${{ secrets.WEBSOCKET_URL_PROD }}

      - name: Run end-to-end tests
        run: |
          npm run test:e2e:production
        env:
          BASE_URL: https://bonsaisat.com
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

      - name: Performance benchmarks
        run: |
          npm run test:performance:production
        env:
          BASE_URL: https://bonsaisat.com

  # Setup monitoring
  setup-monitoring:
    name: Setup Monitoring
    runs-on: ubuntu-latest
    needs: [post-deployment-tests]
    steps:
      - name: Update Sentry release
        run: |
          # Create new release in Sentry
          curl -X POST "https://sentry.io/api/0/organizations/${{ secrets.SENTRY_ORG }}/releases/" \
            -H "Authorization: Bearer ${{ secrets.SENTRY_AUTH_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ needs.pre-deployment.outputs.version }}",
              "projects": ["bonsai-web", "bonsai-websocket"]
            }'

      - name: Update DataDog deployment markers
        run: |
          curl -X POST "https://api.datadoghq.com/api/v1/events" \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}" \
            -d '{
              "title": "Bonsai Production Deployment",
              "text": "Version ${{ needs.pre-deployment.outputs.version }} deployed to production",
              "tags": ["deployment", "production", "bonsai"],
              "source_type_name": "github"
            }'

      - name: Update health check endpoints
        run: |
          # Register new deployment with health check services
          curl -X POST "https://hc-ping.com/${{ secrets.HEALTHCHECK_UUID }}" \
            -d "Deployment ${{ needs.pre-deployment.outputs.version }} completed successfully"

  # Feature flags and gradual rollout
  feature-rollout:
    name: Feature Rollout
    runs-on: ubuntu-latest
    needs: [setup-monitoring]
    if: needs.pre-deployment.outputs.environment == 'production'
    steps:
      - name: Enable feature flags
        run: |
          # Enable features for production
          curl -X PATCH "https://api.launchdarkly.com/api/v2/flags/bonsai/new-sat-features" \
            -H "Authorization: ${{ secrets.LAUNCHDARKLY_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "environmentKey": "production",
              "instructions": [
                {
                  "kind": "turnFlagOn"
                }
              ]
            }'

      - name: Gradual user rollout
        run: |
          # Start with 10% of users
          curl -X PATCH "https://api.launchdarkly.com/api/v2/flags/bonsai/new-features-rollout" \
            -H "Authorization: ${{ secrets.LAUNCHDARKLY_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "environmentKey": "production",
              "instructions": [
                {
                  "kind": "updateFallthroughVariationOrRollout",
                  "rollout": {
                    "variations": [
                      { "variation": 0, "weight": 90000 },
                      { "variation": 1, "weight": 10000 }
                    ]
                  }
                }
              ]
            }'

  # Notification and documentation
  deployment-notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [
      pre-deployment,
      deploy-web,
      deploy-websocket,
      deploy-extensions,
      post-deployment-tests,
      setup-monitoring,
      feature-rollout
    ]
    if: always()
    steps:
      - name: Notify success
        if: ${{ needs.deploy-web.result == 'success' && needs.post-deployment-tests.result == 'success' }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            :rocket: Production deployment successful!
            Version: ${{ needs.pre-deployment.outputs.version }}
            Environment: ${{ needs.pre-deployment.outputs.environment }}
            
            :white_check_mark: Web app deployed to Vercel
            :white_check_mark: WebSocket server deployed to Railway
            :white_check_mark: Browser extensions published
            :white_check_mark: All tests passing
            :white_check_mark: Monitoring active
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify failure
        if: ${{ failure() }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            :x: Production deployment failed!
            Version: ${{ needs.pre-deployment.outputs.version }}
            Environment: ${{ needs.pre-deployment.outputs.environment }}
            
            Please check the GitHub Actions logs and initiate rollback if necessary.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Update deployment documentation
        run: |
          # Update deployment logs in wiki or documentation
          echo "Deployment ${{ needs.pre-deployment.outputs.version }} completed at $(date)" >> DEPLOYMENT_LOG.md
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add DEPLOYMENT_LOG.md
          git commit -m "Update deployment log for ${{ needs.pre-deployment.outputs.version }}" || exit 0
          git push