# WebSocket server Dockerfile
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm@8.15.0

# Copy package files
COPY package.json pnpm-lock.yaml* pnpm-workspace.yaml ./
COPY apps/web/package.json ./apps/web/
COPY packages/*/package.json ./packages/*/

# Install dependencies
RUN pnpm install --frozen-lockfile --prod=false

# Build WebSocket server
FROM base AS builder
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm@8.15.0

# Copy node_modules from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/apps/web/node_modules ./apps/web/node_modules

# Copy source code
COPY . .

# Build WebSocket server
RUN cd apps/web && npx tsx scripts/build-websocket.ts

# Production image
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production

# Create non-root user
RUN addgroup --system --gid 1001 websocket
RUN adduser --system --uid 1001 websocket

# Install production dependencies only
RUN npm install -g pnpm@8.15.0
COPY package.json pnpm-lock.yaml* pnpm-workspace.yaml ./
COPY apps/web/package.json ./apps/web/
RUN pnpm install --frozen-lockfile --prod

# Copy built WebSocket server
COPY --from=builder --chown=websocket:websocket /app/apps/web/dist ./dist
COPY --from=builder --chown=websocket:websocket /app/apps/web/scripts ./scripts

# Install redis for session management
RUN apk add --no-cache redis

USER websocket

EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node scripts/websocket-health-check.js || exit 1

CMD ["node", "dist/websocket-server.js"]